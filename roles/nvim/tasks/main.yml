# Installation
- name: Check if NVIM installed
  command: which nvim
  register: nvim_check
  failed_when: nvim_check.rc > 1
  changed_when: nvim_check.rc == 1

- name: Install required debian packages
  import_tasks: debian.yml
  when: >
    ansible_os_family == "Debian" and
    nvim_check.rc == 1

- name: Install required arch packages
  import_tasks: arch.yml
  when: >
    ansible_os_family == "Archlinux" and
    nvim_check.rc == 1

- name: Install NVIM from Github
  get_url:
    url: "{{ nvim_release_url }}{{ nvim_version }}/{{ nvim_binary_file }}"
    dest: /usr/local/bin/nvim
    mode: "0755"
  become: yes
  when: >
    nvim_check.rc == 1 and
    ansible_env["WSLENV"] is not defined and
    ansible_os_family != "Archlinux"

- name: Install required PyPI packages
  pip:
    name:
      - ptpython
      - isort
      - jedi
      - mypy
      - flake8
      - autopep8
      - yamllint
      - pynvim
      - jedi-language-server
  become: yes

- name: Install required npm packages
  community.general.npm:
    name: "{{ item }}"
    global: yes
  loop:
    - neovim
    - vscode-json-languageserver
    - yaml-language-server
    - vim-language-server
    - prettier
    - lua-fmt
  become: yes

- name: Create ptpython config symlink
  file:
    src: "{{ dotfiles_home }}/ptpython.py"
    dest: "{{ user_home }}/.config/ptpython/config.py"
    state: link

# Plugin manager
- name: Makes sure autoload directory exists
  file:
    path: "{{ user_home }}/.local/share/nvim/site/autoload"
    state: directory
  when: nvim_check.rc == 1

- name: Install vim-plug
  get_url:
    url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    dest: "{{ user_home }}/.local/share/nvim/site/autoload/plug.vim"
  when: nvim_check.rc == 1

# Configuration
- name: Check if vimrc exists
  stat:
    path: "{{ user_home }}/.config/nvim/init.vim"
  register: vimrc_stat
  failed_when: False

- name: Backup vimrc
  command: mv ~/.config/nvim/init.vim ~/init.vim.bak
  args:
    creates: "{{ user_home }}/init.vim.bak"
  when: vimrc_stat.stat.exists

- name: Creates .config/nvim dir
  file:
    path: "{{ user_home }}/.config/nvim"
    state: directory

- name: Symlink coc-settings
  file:
    src: "{{ dotfiles_home }}/coc-settings.json"
    dest: "{{ user_home }}/.config/nvim/coc-settings.json"
    state: link

- name: Symlink init.vim
  file:
    src: "{{ dotfiles_home }}/init.vim"
    dest: "{{ user_home }}/.config/nvim/init.vim"
    state: link

- name: Symlink lua
  file:
    src: "{{ dotfiles_home }}/lua"
    dest: "{{ user_home }}/.config/nvim/lua"
    state: link

- name: Symlink snippets
  file:
    src: "{{ dotfiles_home }}/UltiSnips"
    dest: "{{ user_home }}/.config/nvim/UltiSnips"
    state: link

- name: Creates .config/yapf dir
  file:
    path: "{{ user_home }}/.config/yapf"
    state: directory

- name: Symlink yapf config
  file:
    src: "{{ dotfiles_home }}/style.yapf"
    dest: "{{ user_home }}/.config/yapf/style"
    state: link

- name: Install plugins
  command: nvim +':silent PlugInstall' +qa
  when: nvim_check.rc == 1
